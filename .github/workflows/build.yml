name: Build Image for AWS ECR

permissions:
  id-token: write
  contents: read

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
    branches: [main, develop]
    paths:
      - "Dockerfile"
      - "env.yml"
      - "install.R"
      - "install_biocmanager.R"

  push:
    branches: [main, develop]
    paths:
      - "Dockerfile"
      - "env.yml"
      - "install.R"
      - "install_biocmanager.R"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials for Dynamic Region
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ secrets.AWS_ACCESS_DEFAULT_REGION }}
          role-to-assume: arn:aws:iam::576661951794:role/GitHubActions-ServerlessDeploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag based on branch
        id: set-tag
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "IMAGE_TAG=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "IMAGE_TAG=staging" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Check if image tag exists
        id: check-tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: reports
          IMAGE_TAG: ${{ github.sha }}
        run: |
          if aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG; then
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Fetch the latest image tag from Amazon ECR
        id: latest-tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: reports
          AWS_REGION: us-west-1
        run: |
          LATEST_TAG=$(aws ecr describe-images \
            --repository-name $ECR_REPOSITORY \
            --region $AWS_REGION \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
            --output text)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Pull the latest image for cache
        if: steps.latest-tag.outputs.LATEST_TAG != 'None'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: reports
        run: |
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.latest-tag.outputs.LATEST_TAG }}

      - name: Build, tag, and push image to Amazon ECR
        if: steps.check-tag.outputs.TAG_EXISTS == 'false'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: reports
          IMAGE_TAG: ${{ github.sha }}
          LABEL_TAG: ${{ steps.set-tag.outputs.IMAGE_TAG }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . \
            --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.latest-tag.outputs.LATEST_TAG }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Tag the same image as 'prod' or 'staging'
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$LABEL_TAG
          # Push the 'LABEL_TAG' tag
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$LABEL_TAG

      - name: Determine Secret Name
        id: set-secret-name
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "SECRET_NAME=staging/ednaExplorer/reportsImageTagR" >> $GITHUB_ENV
          else
            echo "SECRET_NAME=prod/ednaExplorer/reportsImageTagR" >> $GITHUB_ENV
          fi

      - name: Update AWS Secrets Manager secret
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: reports
        run: |
          SECRET_VALUE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          # Prepare the secret value as a JSON string
          SECRET_STRING="{\"image\":\"${SECRET_VALUE}\"}"

          # Update the secret
          aws secretsmanager update-secret --secret-id $SECRET_NAME --secret-string "$SECRET_STRING"
